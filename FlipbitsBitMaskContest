import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;



 class Main{
    private static final Main main = new Main();
    private static Reader sc;
    static int st[]=new int[(1000005<<1)];
    static int lazy[]=new int[(1000005<<1)];
    static int n;

    static int queryUtil(int start,int end,int left,int right,int node){
        
            if((lazy[node]&1)==1){
            st[node]=(end-start+1)-st[node];
            if(start!=end){
                lazy[(node<<1)+1]+=lazy[node];
                lazy[(node<<1)+2]+=lazy[node];
            }
            lazy[node]=0;
            }
        
         
        if(start>=left && end<=right){
            return st[node];
        }
        
        if(start>right || end<left){
            return 0;
        }
        
        int mid=start+((end-start)>>1);
        
        return queryUtil(start,mid,left,right,(node<<1)+1)+queryUtil(mid+1,end,left,right,(node<<1)+2);
    }

   
    static int rangeUtil(int start,int end,int left,int right,int value,int node){     
        
        
            if((lazy[node]&1)==1){
            st[node]=(end-start+1)-st[node];
            if(start!=end){
                lazy[(node<<1)+1]+=lazy[node];
                lazy[(node<<1)+2]+=lazy[node];
            }
            lazy[node]=0;
        }
        
        if(end<left || start>right) return st[node];
        
        if(start>=left && end<=right){
            st[node]=(end-start+1)-st[node];
            if(start!=end){
                lazy[(node<<1)+1]+=value;
                lazy[(node<<1)+2]+=value;
            }
            return st[node];
        }
        
        int mid=start+((end-start)>>1);
        
        st[node]=rangeUtil(start,mid,left,right,value,(node<<1)+1)+
                rangeUtil(mid+1,end,left,right,value,(node<<1)+2);
        
        return st[node];
    }
    
    
    
    
    public static void main(String[] args) throws IOException{
        
        
             sc = main.new Reader(); 
             PrintWriter pw=new PrintWriter(System.out);
            
             n=sc.nextInt();
            int q=sc.nextInt();
             
            for (int i = 0; i < q; i++) {
          
            if(sc.nextInt()==0){
                int left=sc.nextInt();
                int right=sc.nextInt();
                
                rangeUtil(0,n-1,left, right, 1,0);
                
            }
            else{
                int left=sc.nextInt();
                int right=sc.nextInt();
                
                pw.println(queryUtil(0,n-1,left, right,0));
              
            }
                
             
        }
          pw.flush();  
         
        }   
    
     class Reader {
	    final private int BUFFER_SIZE = 1 << 16;private DataInputStream din;private byte[] buffer;private int bufferPointer, bytesRead;
	    public Reader(){din=new DataInputStream(System.in);buffer=new byte[BUFFER_SIZE];bufferPointer=bytesRead=0;
	    }public Reader(String file_name) throws IOException{din=new DataInputStream(new FileInputStream(file_name));buffer=new byte[BUFFER_SIZE];bufferPointer=bytesRead=0;
	    }public String readLine() throws IOException{byte[] buf=new byte[64];int cnt=0,c;while((c=read())!=-1){if(c=='\n')break;buf[cnt++]=(byte)c;}return new String(buf,0,cnt);
	    }public int nextInt() throws IOException{int ret=0;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c=read();do{ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');if(neg)return -ret;return ret;
	    }public long nextLong() throws IOException{long ret=0;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c=read();do{ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');if(neg)return -ret;return ret;
	    }public double nextDouble() throws IOException{double ret=0,div=1;byte c=read();while(c<=' ')c=read();boolean neg=(c=='-');if(neg)c = read();do {ret=ret*10+c-'0';}while((c=read())>='0'&&c<='9');if(c=='.')while((c=read())>='0'&&c<='9')ret+=(c-'0')/(div*=10);if(neg)return -ret;return ret;
	    }private void fillBuffer() throws IOException{bytesRead=din.read(buffer,bufferPointer=0,BUFFER_SIZE);if(bytesRead==-1)buffer[0]=-1;
	    }private byte read() throws IOException{if(bufferPointer==bytesRead)fillBuffer();return buffer[bufferPointer++];
	    }public void close() throws IOException{if(din==null) return;din.close();}
	}


}
 

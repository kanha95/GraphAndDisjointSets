import java.io.*;
import java.util.*;
import java.util.regex.Pattern;
 

class node{
    int data;
    int parent;
    int rank;
    node(int d,int p,int r){
        data=d;
        parent=p;
        rank=r;
    }
    
    
    
}

 class disjointSets{
    
     HashMap h=new HashMap();
  void makeSets(int n){
      for(int i=0;i<n;i++){
          h.put(i, new node(i,i,0));
      }
      
  }
    int find(int i){
        node n=(node)h.get(i);
        if(i==n.parent){
            return i;
        }else{
            h.put(i, find(n.parent));
        }
       
        return n.parent; 
    }
    void union(int x,int y){
        int x_root=find(x);
        int y_root=find(y);
        
        if(x_root!=y_root){
            node n1=(node)h.get(x_root);
            node n2=(node)h.get(y_root);
            
             if(n1.rank<n2.rank){
                 h.put(n2.data, new node(n1.data,n1.parent,0));
                 h.put(n1.data, new node(n1.data,n1.parent,n1.rank-1));
             }
             else{
                   h.put(n1.data, new node(n2.data,n2.parent,0));
                 h.put(n2.data, new node(n2.data,n2.parent,n2.rank-1));
                 
             }
            
            
        }
        
        
        
    } 
    
     
 }   
    
    
    



 class jam
{

   
  
	public static void main(String args[]) throws Exception
	{
		InputReader sc=new InputReader(System.in);		
		PrintWriter w=new PrintWriter(System.out);
      
         disjointSets ds=new disjointSets();
         ds.makeSets(7);
         ds.union(0, 1);
         ds.union(1, 2);
        node x=null;
         for(int i=0;i<7;i++){
         x=(node)(ds.h.get(i));
             System.out.print(x.parent+" ");
         }
            System.out.println("");
         for(int i=0;i<7;i++){
         x=(node)(ds.h.get(i));
             System.out.print(x.rank+" ");
         }
         
         
         
        }
        }
 
 
 
	 class InputReader
	{
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;
		private SpaceCharFilter filter;
		
		public InputReader(InputStream stream)
		{
			this.stream = stream;
		}
		
		public int read()
		{
			if (numChars==-1) 
				throw new InputMismatchException();
			
			if (curChar >= numChars)
			{
				curChar = 0;
				try 
				{
					numChars = stream.read(buf);
				}
				catch (IOException e)
				{
					throw new InputMismatchException();
				}
				
				if(numChars <= 0)				
					return -1;
			}
			return buf[curChar++];
		}
	 
		public String nextLine()
		{
			BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
			String str = "";
            try
            {
                str = br.readLine();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            return str;
		}
		public int nextInt()
		{
			int c = read();
			
			while(isSpaceChar(c)) 
				c = read();
			
			int sgn = 1;
			
			if (c == '-') 
			{
				sgn = -1;
				c = read();
			}
			
			int res = 0;
			do 
			{
				if(c<'0'||c>'9') 
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			}
			while (!isSpaceChar(c)); 
			
			return res * sgn;
		}
		
		public long nextLong() 
		{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') 
			{
				sgn = -1;
				c = read();
			}
			long res = 0;
			
			do 
			{
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			}
			while (!isSpaceChar(c));
				return res * sgn;
		}
		
		public double nextDouble() 
		{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			int sgn = 1;
			if (c == '-') 
			{
				sgn = -1;
				c = read();
			}
			double res = 0;
			while (!isSpaceChar(c) && c != '.') 
			{
				if (c == 'e' || c == 'E')
					return res * Math.pow(10, nextInt());
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				res *= 10;
				res += c - '0';
				c = read();
			}
			if (c == '.') 
			{
				c = read();
				double m = 1;
				while (!isSpaceChar(c)) 
				{
					if (c == 'e' || c == 'E')
						return res * Math.pow(10, nextInt());
					if (c < '0' || c > '9')
						throw new InputMismatchException();
					m /= 10;
					res += (c - '0') * m;
					c = read();
				}
			}
			return res * sgn;
		}
		
		public String readString() 
		{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do 
			{
				res.appendCodePoint(c);
				c = read();
			} 
			while (!isSpaceChar(c));
			
			return res.toString();
		}
	 
		public boolean isSpaceChar(int c) 
		{
			if (filter != null)
				return filter.isSpaceChar(c);
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}
	 
		public String next() 
		{
			return readString();
		}
		
		public interface SpaceCharFilter 
		{
			public boolean isSpaceChar(int ch);
		}
	}
